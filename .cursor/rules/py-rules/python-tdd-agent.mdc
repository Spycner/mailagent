---
description: "When Python environment management appears in docs, scripts, CI or code edits, use uv exclusively for env and packages. Avoid pip/venv references. Follow TDD practices for all Python development."
globs:
alwaysApply: false
---
# Python Development Rules

## Critical Rules

### Environment Management
- Always rely on `uv` for package installation and environment management.
- Create environments with `uv init <options> <path>` when demonstrating setup.
- Install or update deps with `uv add ...`, lock with `uv lock`, sync with `uv sync`.
- Never reference `pip install`, `python -m venv`, or `virtualenv` in docs, scripts, or CI.
- In automation (Makefile, GitHub Actions, etc.) replace any `pip`/`venv` commands with their `uv` equivalents.
- Install `uv` via the official install script or package manager—not with `pip`.

### Test-Driven Development (TDD)
- **Write tests first** before implementing any new functionality
- Follow the Red-Green-Refactor cycle: write failing test → make it pass → refactor
- Use `pytest` as the primary testing framework
- Structure tests with clear Arrange-Act-Assert pattern
- Write descriptive test names that explain the behavior being tested
- Create tests for edge cases, error conditions, and happy paths
- Mock external dependencies to keep tests fast and isolated
- Maintain high test coverage but focus on meaningful tests over coverage metrics
- Run tests frequently during development with `uv run pytest`

## Examples

### Environment Management
<example>
  # Good – uses uv
  ```bash
  uv sync
  uv add pytest --dev
  uv run pytest
  ```
</example>

<example type="invalid">
  # Bad – uses pip directly
  ```bash
  pip install -r requirements/dev.txt
  pip install pytest
  python -m pytest
  ```
</example>

### TDD Practice
<example>
  # Good – TDD approach
  ```python
  # test_calculator.py - Write test first
  def test_add_two_numbers():
      calculator = Calculator()
      result = calculator.add(2, 3)
      assert result == 5

  # calculator.py - Then implement
  class Calculator:
      def add(self, a, b):
          return a + b
  ```
</example>

<example type="invalid">
  # Bad – implementation without tests
  ```python
  # calculator.py - Implementation first without tests
  class Calculator:
      def add(self, a, b):
          return a + b

      def subtract(self, a, b):
          return a - b
      # No tests written
  ```
</example>
